## !!!!注意在使用{n,m}限制字符长度时，千万不要写成{n-m},在这里浪费类一个多小时！！！！！

一，字符串匹配

\d  可以匹配一个数字
\w  可以匹配一个字母或数字
.    可以匹配任意单个字符
*	表示任意个字符(包括0个)
+	表示至少一个字符
？	表示0个或者1个字符
{n}	表示n个字符
{n,m} 表示n-m个字符
A|B  可以匹配A或者B
^	表示行的开头,^\d表示必须以数字开头
$	表示行的结束,\d$表示必须以数字结束
import re
 re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
 ^\d{3} 表示以数字开头，有三个字符
 \- 匹配字符 -
 \d{3,8}$ 表示以数字结束，有3-8个字符
 
 二，切分字符串
 >>> re.split(r'\s+','a b  c')
['a', 'b', 'c']
[\s\,\;]+ 表示至少有一个字符匹配[]中的字符
>>> re.split(r'[\s\,\;]+','a,b;;c  d e,f')
['a', 'b', 'c', 'd', 'e', 'f']


三，分组 用()表示的就是要提取的分组
group(0)永远是原始字符串，group(1),group(2)表示第1,2...子串	
>>> m = re.match(r'^(\d{3})(-)(\d{1})(\d{2,8})$','010-12345')
>>> m.groups()
('010', '-', '1', '2345')
>>> m.groups()
('010', '-', '1', '2345')
>>> m.group(0)
'010-12345'
>>> m.group(1)
'010'
>>> m.group(2)
'-'
>>> m.group(3)
'1'
>>> m.group(4)
'2345'

四，编译
>>> import re
# 编译:
>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
>>> re_telephone.match('010-12345').groups()
('010', '12345')

五，贪婪匹配
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')
由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')

	
