函数：
	定义函数时，需要确定函数名和参数个数；

	如果有必要，可以先对参数的数据类型做检查；

	函数体内部可以用return随时返回函数结果；

	函数执行完毕也没有return语句时，自动return None。

	函数可以同时返回多个值，但其实就是一tuple
	
默认参数 : !!!!!定义默认参数要牢记一点：默认参数必须指向不变对象！

			先定义一个函数，传入一个list，添加一个END再返回：
			def add_end(L=[]):
		   	 L.append('END')
		    		return L

			当你正常调用时，结果似乎不错：

			>>> add_end([1, 2, 3])
			[1, 2, 3, 'END']
			>>> add_end(['x', 'y', 'z'])
			['x', 'y', 'z', 'END']

			当你使用默认参数调用时，一开始结果也是对的：

			>>> add_end()
			['END']

			但是，再次调用add_end()时，结果就不对了：

			>>> add_end()
			['END', 'END']
			>>> add_end()
			['END', 'END', 'END']

			很多初学者很疑惑，默认参数是[]，但是函数似乎每次都“记住了”上添			加了'END'后的list。
		原因解释如下：
		Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L		也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用		时，默认参数的内容就变了，不再是函数定义时的[]了
			要修改上面的例子，我们可以用None这个不变对象来实现：

		def add_end(L=None):
		    if L is None:
			L = []
		    L.append('END')
		    return L

	
